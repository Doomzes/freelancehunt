# main.py

import logging
import os
from datetime import datetime, timedelta
from collections import defaultdict
import math
import aiomysql
from pefile import lang
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ConversationHandler,
)
from dotenv import load_dotenv

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ–∫–ª–∞–¥—É
from utils import tr
from translations import MESSAGES

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    APPOINTMENT,
    APPOINTMENT_DATE,
    APPOINTMENT_TIME,
    CONFIRM_APPOINTMENT,
    MENU_SELECTION,
    ADMIN_MENU,
    ADMIN_SCHEDULE,
    ADMIN_CLIENTS,
    SETTINGS,
    MEDIA_MANAGEMENT,
    CHANGE_THRESHOLD,
    CHANGE_PERCENTAGE,
    PRICE_EDIT_ADD,
    PRICE_EDIT_EDIT,
    PRICE_EDIT_DELETE,
    MEDIA_UPLOAD_PHOTO,
    MEDIA_UPLOAD_VIDEO,
    PRICE_EDIT_SELECTION,
    ADD_PRICE_ITEM_NAME,
    ADD_PRICE_ITEM_PRICE,
    EDIT_PRICE_ITEM_ID,
    EDIT_PRICE_ITEM_NAME,
    EDIT_PRICE_ITEM_PRICE,
    DELETE_PRICE_ITEM_ID,
    PRICE_EDIT_EDIT_ID,
    PRICE_EDIT_EDIT_NAME,
    PRICE_EDIT_EDIT_PRICE,
    PRICE_EDIT_DELETE_ID,
    SURVEY_Q1, SURVEY_Q2, SURVEY_Q3, SURVEY_Q4, SURVEY_Q5, SURVEY_Q6, SURVEY_Q7,
    CANCEL_APPOINTMENT,
    CLIENTS_LIST,
    CLIENT_DETAILS,
    PRICE_EDIT_ADD_NAME,
    PRICE_EDIT_ADD_PRICE,
    LANGUAGE_CHOICE
) = range(41)

# –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–ø—Ä–æ—Å–∞
SURVEY_QUESTIONS = [
    "1. –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ?",
    "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É?",
    "3. –Ø–∫–∞ –¥–æ–≤–∂–∏–Ω–∞ –≤–æ–ª–æ—Å—Å—è?",
    "4. –ß–∏ —î –±–æ—Ä–æ–¥–∞?",
    "5. –ß–æ–º—É –æ–±—Ä–∞–ª–∏ –º–µ–Ω–µ?",
    "6. –©–æ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è, —â–æ –Ω–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è?",
    "7. –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏, —â–æ–± –≤–∏ –±—ñ–ª—å—à–µ –Ω–µ –∑–≤–µ—Ä—Ç–∞–ª–∏—Å—è –¥–æ –º–µ–Ω–µ?",
]

TWO_WEEKS_REMINDER_TEXT = (
    "<b>–ü—Ä–∏–π—à–æ–≤ —á–∞—Å –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞—á—ñ—Å–∫—É!</b> ‚úÇÔ∏è‚ú®\n"
    "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –≤—ñ–∑–∏—Ç, —â–æ–± –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å—Ç–∏–ª—å —Ç–∞ –¥–æ–≥–ª—è–¥ –∑–∞ –≤–æ–ª–æ—Å—Å—è–º."
)

# –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
CLIENTS_PER_PAGE = 6

# –í–∫–ª—é—á–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä–µ–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env
load_dotenv()

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ –∑ –ø–µ—Ä–µ–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
MYSQL_USER = os.getenv('MYSQL_USER')
MYSQL_PASSWORD = os.getenv('MYSQL_PASSWORD')
MYSQL_HOST = os.getenv('MYSQL_HOST', 'localhost')
MYSQL_DB = os.getenv('MYSQL_DB')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID'))  # ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞

if not all([TOKEN, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DB, ADMIN_CHAT_ID]):
    logger.error("–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤—Å—ñ –ø–µ—Ä–µ–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: TELEGRAM_BOT_TOKEN, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DB, ADMIN_CHAT_ID")
    exit(1)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—É–ª—É –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
async def create_db_pool():
    pool = await aiomysql.create_pool(
        host=MYSQL_HOST,
        port=3306,
        user=MYSQL_USER,
        password=MYSQL_PASSWORD,
        db=MYSQL_DB,
        autocommit=True
    )
    return pool

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
async def create_surveys_table(db_pool):
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                CREATE TABLE IF NOT EXISTS surveys (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    chat_id BIGINT NOT NULL UNIQUE,
                    full_name VARCHAR(255),
                    phone_number VARCHAR(50),
                    hair_length VARCHAR(100),
                    has_beard BOOLEAN,
                    why_chose_us TEXT,
                    likes_dislikes TEXT,
                    suggestions TEXT,
                    visit_count INT DEFAULT 0,
                    discount_available BOOLEAN DEFAULT FALSE,
                    user_lang VARCHAR(10) DEFAULT 'ua',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            logger.info("–¢–∞–±–ª–∏—Ü—è surveys –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞/—Å—Ç–≤–æ—Ä–µ–Ω–∞.")

async def create_appointments_table(db_pool):
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                CREATE TABLE IF NOT EXISTS appointments (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    chat_id BIGINT NOT NULL,
                    full_name VARCHAR(255) NOT NULL,
                    appointment_date DATE NOT NULL,
                    appointment_time TIME NOT NULL,
                    discount DECIMAL(10,2) DEFAULT 0.00,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE KEY unique_appointment (appointment_date, appointment_time)
                )
            """)
            logger.info("–¢–∞–±–ª–∏—Ü—è appointments –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞/—Å—Ç–≤–æ—Ä–µ–Ω–∞.")

# –ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏–π –∫–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—à–∏—Ö —Ç–∞–±–ª–∏—Ü—å –∑–∞–ª–∏—à–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω
# ...

# –§—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
async def on_startup(application: Application):
    logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
    try:
        application.bot_data['db_pool'] = await create_db_pool()
        logger.info("–ü—É–ª –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–æ.")
        db_pool = application.bot_data['db_pool']

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
        await create_surveys_table(db_pool)
        await create_appointments_table(db_pool)
        await create_settings_table(db_pool)
        await create_price_list_table(db_pool)
        await create_media_table(db_pool)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—É–ª—É –ø—ñ–¥–∫–ª—é—á–µ–Ω—å: {e}")
        raise

# –§—É–Ω–∫—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—É–ª—É –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞
async def on_shutdown(application: Application):
    logger.info("–ó–∞–∫—Ä–∏—Ç—Ç—è –ø—É–ª—É –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
    db_pool = application.bot_data.get('db_pool')
    if db_pool:
        db_pool.close()
        await db_pool.wait_closed()

# main.py (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu_keyboard(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get('lang', 'ua')  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
    menu_texts = MESSAGES.get(lang, MESSAGES['ua'])['main_menu']
    keyboard = menu_texts.copy()

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ê–¥–º—ñ–Ω –ú–µ–Ω—é" –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id == ADMIN_CHAT_ID:
        admin_menu_button = MESSAGES.get(lang, MESSAGES['ua']).get('admin_menu_extra_button', "üìã –ê–¥–º—ñ–Ω –ú–µ–Ω—é")
        keyboard.append([admin_menu_button])

    return ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=False
    )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_admin_menu_keyboard(context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get('lang', 'ua')  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
    admin_menu_texts = MESSAGES.get(lang, MESSAGES['ua'])['admin_menu']
    return ReplyKeyboardMarkup(
        admin_menu_texts,
        resize_keyboard=True,
        one_time_keyboard=False
    )

# main.py (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—á–∞—Ç–∫—É –≤–∑–∞—î–º–æ–¥—ñ—ó
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∏–∫–ª–∏–∫–∞–≤ /start")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —É user_data –≤–∂–µ –≤–∏–±—Ä–∞–Ω–∞ –º–æ–≤–∞
    user_lang = context.user_data.get('lang')
    if user_lang:
        # –Ø–∫—â–æ –º–æ–≤–∞ –≤–∂–µ –≤–∏–±—Ä–∞–Ω–∞ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é
        await update.message.reply_text(
            tr(context, 'welcome'),
            reply_markup=get_main_menu_keyboard(user_id, context)
        )
        return MENU_SELECTION
    else:
        # –Ø–∫—â–æ –º–æ–≤–∏ —â–µ –Ω–µ–º–∞—î ‚Äî –∑–∞–ø–∏—Ç—É—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏
        lang_option_ua = MESSAGES['ua']['language_option_ua']
        lang_option_ru = MESSAGES['ua']['language_option_ru']
        lang_option_cz = MESSAGES['ua']['language_option_cz']
        keyboard = [
            [lang_option_ua, lang_option_ru],
            [lang_option_cz]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            tr(context, 'choose_language'),
            reply_markup=reply_markup
        )
        return LANGUAGE_CHOICE

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –º–æ–≤–∏
async def choose_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_response = update.message.text.strip().lower()
    lang_map = {
        MESSAGES['ua']['language_option_ua'].lower(): "ua",
        MESSAGES['ua']['language_option_ru'].lower(): "ru",
        MESSAGES['ua']['language_option_cz'].lower(): "cz"
    }
    chosen_lang = lang_map.get(user_response)
    if not chosen_lang:
        lang = context.user_data.get('lang', 'ua')
        await update.message.reply_text(
            MESSAGES.get(lang, MESSAGES['ua']).get('invalid_language_selection', "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –º–æ–≤—É.")
        )
        return LANGUAGE_CHOICE

    context.user_data['lang'] = chosen_lang

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–æ–≤—É —É –ë–î:
    db_pool = context.application.bot_data.get('db_pool')
    user_id = update.effective_user.id
    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    UPDATE surveys 
                    SET user_lang = %s 
                    WHERE chat_id = %s
                """, (chosen_lang, user_id))

                # –Ø–∫—â–æ –∑–∞–ø–∏—Å—É –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
                if cur.rowcount == 0:
                    await cur.execute("""
                        INSERT INTO surveys (chat_id, user_lang) 
                        VALUES (%s, %s)
                    """, (user_id, chosen_lang))
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –º–æ–≤–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        await update.message.reply_text(tr(context, 'error_generic'))
        return LANGUAGE_CHOICE

    # –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏ –ø–æ–∫–∞–∑—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é
    await update.message.reply_text(
        tr(context, 'language_set'),
        reply_markup=get_main_menu_keyboard(user_id, context)
    )
    return MENU_SELECTION


# main.py (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é
async def handle_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_selection = update.message.text
    user_id = update.effective_user.id
    lang = context.user_data.get('lang', 'ua')
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∏–±—Ä–∞–≤ –æ–ø—Ü—ñ—é: {user_selection}")

    if user_selection == 'book_appointment':
        await handle_booking(update, context)
        return APPOINTMENT
    elif user_selection == 'portfolio':
        await portfolio(update, context)
        return MENU_SELECTION
    elif user_selection == 'price':
        await price(update, context)
        return MENU_SELECTION
    elif user_selection == 'my_appointment':
        return await my_appointment(update, context)
    elif user_selection == 'survey':
        await survey_start(update, context)
        return SURVEY_Q1
    elif user_selection == 'admin_menu' and user_id == ADMIN_CHAT_ID:
        await show_admin_menu(update, context)
        return ADMIN_MENU
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_selection}")
        await update.message.reply_text(
            tr(context, 'unknown_command')
        )
        return MENU_SELECTION

# main.py (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Å—É –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É
async def handle_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    lang = context.user_data.get('lang', 'ua')
    db_pool = context.application.bot_data.get('db_pool')

    if not db_pool:
        await update.message.reply_text(tr(context, 'error_generic'))
        return MENU_SELECTION

    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ –∑–∞–ø–∏—Å —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                await cur.execute("""
                    SELECT appointment_date, TIME_FORMAT(appointment_time, '%%H:%%i')
                    FROM appointments
                    WHERE chat_id = %s AND appointment_date >= CURDATE()
                    ORDER BY appointment_date, appointment_time
                    LIMIT 1
                """, (user_id,))
                result = await cur.fetchone()

                if result:
                    appointment_date, appointment_time = result
                    # –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∂–µ —î –∑–∞–ø–∏—Å
                    keyboard = [
                        [MESSAGES[lang]['cancel_appointment_button'], "–ó–∞–ø–∏—Å–∞—Ç–∏ —â–µ –ª—é–¥–∏–Ω—É"],
                        [MESSAGES[lang]['back_button']]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    await update.message.reply_text(
                        tr(context, 'existing_appointment').format(date=appointment_date, time=appointment_time),
                        reply_markup=reply_markup
                    )
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–ª–∞–≥ –¥–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è –¥—ñ—ó
                    context.user_data['has_appointment'] = True
                    return MENU_SELECTION
                else:
                    # –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∑–∞–ø–∏—Å—É
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–æ–≤–Ω–∏–≤ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
                    await cur.execute("SELECT full_name, phone_number FROM surveys WHERE chat_id = %s", (user_id,))
                    survey_data = await cur.fetchone()

                    if survey_data and survey_data[0] and survey_data[1]:
                        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–æ–≤–Ω–∏–≤ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —ñ–º'—è
                        context.user_data['appointment'] = {
                            'full_name': survey_data[0],
                            'is_additional_person': False
                        }
                        await ask_appointment_date(update, context)
                        return APPOINTMENT_DATE
                    else:
                        # –û–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ–π–¥–µ–Ω –∞–±–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–∞–ø–∏—Å—É - –∑–∞–ø–∏—Ç—É—î–º–æ —ñ–º'—è
                        context.user_data['appointment'] = {'is_additional_person': False}
                        await ask_full_name(update, context)
                        return APPOINTMENT
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∑–∞–ø–∏—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        await update.message.reply_text(tr(context, 'error_generic'))
        return MENU_SELECTION

# main.py (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Ç—É –ø–æ–≤–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ
async def ask_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = context.user_data.get('lang', 'ua')
    await update.message.reply_text(
        tr(context, 'enter_full_name'),
        reply_markup=ReplyKeyboardRemove()
    )
    return APPOINTMENT

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ —Ç–∞ –∑–∞–ø–∏—Ç –¥–∞—Ç–∏
async def appointment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    full_name = update.message.text.strip()
    user_id = update.effective_user.id
    lang = context.user_data.get('lang', 'ua')
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∫–∞–∑–∞–≤ —ñ–º'—è: {full_name}")
    context.user_data['appointment'] = {'full_name': full_name}

    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–±—Ä–∞—Ç–∏ –¥–∞—Ç—É
    await ask_appointment_date(update, context)
    return APPOINTMENT_DATE

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–∞—Ç–∏ –∑–∞–ø–∏—Å—É
async def ask_appointment_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = context.user_data.get('lang', 'ua')
    now = datetime.now()
    dates = []

    for i in range(0, 14):  # –í—ñ–¥ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–æ 13 –¥–Ω—ñ–≤ –≤–ø–µ—Ä–µ–¥
        date = now + timedelta(days=i)
        date_str = date.strftime('%Y-%m-%d')
        dates.append([date_str])

    reply_markup = ReplyKeyboardMarkup(dates, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        tr(context, 'choose_appointment_date'),
        reply_markup=reply_markup
    )
    return APPOINTMENT_DATE

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏ —Ç–∞ –∑–∞–ø–∏—Ç —á–∞—Å—É
async def select_appointment_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    selected_date = update.message.text.strip()
    user_id = update.effective_user.id
    lang = context.user_data.get('lang', 'ua')
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∏–±—Ä–∞–≤ –¥–∞—Ç—É: {selected_date}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ 'appointment'
    if 'appointment' not in context.user_data:
        context.user_data['appointment'] = {}

    context.user_data['appointment']['date'] = selected_date

    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–±—Ä–∞—Ç–∏ —á–∞—Å
    await ask_appointment_time(update, context, selected_date)
    return APPOINTMENT_TIME

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Ç—É —á–∞—Å—É –∑–∞–ø–∏—Å—É
async def ask_appointment_time(update: Update, context: ContextTypes.DEFAULT_TYPE, selected_date: str) -> int:
    user_id = update.effective_user.id
    lang = context.user_data.get('lang', 'ua')
    db_pool = context.application.bot_data.get('db_pool')
    if not db_pool:
        await update.message.reply_text(tr(context, 'error_generic'))
        return MENU_SELECTION

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–π–Ω—è—Ç–∏—Ö —á–∞—Å–æ–≤–∏—Ö —Å–ª–æ—Ç—ñ–≤ –Ω–∞ –æ–±—Ä–∞–Ω—É –¥–∞—Ç—É
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT TIME_FORMAT(appointment_time, '%%H:%%i') FROM appointments
                    WHERE appointment_date = %s
                """, (selected_date,))
                taken_times = [row[0] for row in await cur.fetchall()]

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏ (–∑ 9:00 –¥–æ 17:00, –∫—Ä–æ–∫ 30 —Ö–≤–∏–ª–∏–Ω)
        time_slots = []
        start_time = datetime.strptime('09:00', '%H:%M')
        end_time = datetime.strptime('17:00', '%H:%M')
        delta = timedelta(minutes=30)
        current_time = start_time

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ ‚Äî —Å—å–æ–≥–æ–¥–Ω—ñ
        selected_date_obj = datetime.strptime(selected_date, '%Y-%m-%d').date()
        today = datetime.now().date()
        is_today = selected_date_obj == today

        while current_time < end_time:
            time_str = current_time.strftime('%H:%M')

            # –Ø–∫—â–æ –æ–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ ‚Äî —Å—å–æ–≥–æ–¥–Ω—ñ, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –º–µ–Ω—à–µ —á–∞—Å—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è 2 –≥–æ–¥–∏–Ω–∏
            if is_today:
                appointment_datetime = datetime.combine(today, current_time.time())
                if appointment_datetime < datetime.now() + timedelta(hours=2):
                    current_time += delta
                    continue

            if time_str not in taken_times:
                time_slots.append([time_str])
            current_time += delta

        if not time_slots:
            await update.message.reply_text(
                tr(context, 'no_available_time'),
                reply_markup=ReplyKeyboardRemove()
            )
            await ask_appointment_date(update, context)
            return APPOINTMENT_DATE

        # –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —á–∞—Å–∏, —è–∫—â–æ –±—É–ª–∏
        context.user_data.pop('available_times', None)

        reply_markup = ReplyKeyboardMarkup(time_slots, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            tr(context, 'choose_time'),
            reply_markup=reply_markup
        )
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —á–∞—Å–∏
        available_times = [slot[0] for slot in time_slots]
        context.user_data['available_times'] = available_times
        return APPOINTMENT_TIME
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –¥–ª—è –¥–∞—Ç—ã {selected_date}: {e}")
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —á–∞—Å—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return MENU_SELECTION

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —á–∞—Å—É —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É
async def select_appointment_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    selected_time = update.message.text.strip()
    user_id = update.effective_user.id
    lang = context.user_data.get('lang', 'ua')
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∏–±—Ä–∞–≤ —á–∞—Å: {selected_time}")
    available_times = context.user_data.get('available_times', [])

    if selected_time not in available_times:
        await update.message.reply_text(
            tr(context, 'invalid_time_selection'),
            reply_markup=ReplyKeyboardMarkup([available_times], resize_keyboard=True, one_time_keyboard=True)
        )
        return APPOINTMENT_TIME

    context.user_data['appointment']['time'] = selected_time

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É
    appointment_info = context.user_data['appointment']
    await update.message.reply_text(
        tr(context, 'confirm_appointment').format(
            full_name=appointment_info['full_name'],
            date=appointment_info['date'],
            time=appointment_info['time']
        ),
        reply_markup=ReplyKeyboardMarkup([['–¢–∞–∫', '–°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True, one_time_keyboard=True)
    )
    return CONFIRM_APPOINTMENT

# main.py (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
async def confirm_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_response = update.message.text.strip().lower()
    user_id = update.effective_user.id
    lang = context.user_data.get('lang', 'ua')
    db_pool = context.application.bot_data.get('db_pool')

    if user_response == '—Ç–∞–∫':
        appointment_info = context.user_data['appointment']
        if not db_pool:
            await update.message.reply_text(tr(context, 'error_generic'))
            return MENU_SELECTION

        try:
            async with db_pool.acquire() as conn:
                async with conn.cursor() as cur:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∑–Ω–∏–∂–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    await cur.execute("SELECT discount_available, visit_count FROM surveys WHERE chat_id = %s", (user_id,))
                    survey_data = await cur.fetchone()

                    await cur.execute("SELECT discount_threshold, discount_percentage FROM settings WHERE id = 1")
                    settings_data = await cur.fetchone()

                    discount = 0.0
                    survey_discount_percentage = 10.0  # –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –∑–Ω–∏–∂–∫–∏ –≤—ñ–¥ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è

                    discount_available = False
                    discount_threshold = 6  # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 6 –≤—ñ–∑–∏—Ç—ñ–≤
                    visit_discount_percentage = 15.0  # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 15% –∑–Ω–∏–∂–∫—É

                    current_visit_count = 0

                    if survey_data:
                        discount_available = survey_data[0]
                        current_visit_count = survey_data[1]
                    if settings_data:
                        discount_threshold = int(settings_data[0])
                        visit_discount_percentage = float(settings_data[1])

                    # –û–±—á–∏—Å–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∑–Ω–∏–∂–∫—É
                    if discount_available:
                        discount += survey_discount_percentage  # –î–æ–¥–∞—î–º–æ –∑–Ω–∏–∂–∫—É –≤—ñ–¥ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∫—Ä–∞—Ç–Ω–µ 6-–µ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è
                    if (current_visit_count + 1) % discount_threshold == 0:
                        discount += visit_discount_percentage  # –î–æ–¥–∞—î–º–æ –∑–Ω–∏–∂–∫—É –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å

                    # –í—Å—Ç–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∑–Ω–∏–∂–∫–∏
                    await cur.execute("""
                        INSERT INTO appointments (
                            chat_id,
                            full_name,
                            appointment_date,
                            appointment_time,
                            discount
                        ) VALUES (%s, %s, %s, %s, %s)
                    """, (
                        user_id,
                        appointment_info['full_name'],
                        appointment_info['date'],
                        appointment_info['time'],
                        discount
                    ))
                    appointment_id = cur.lastrowid

                    # –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å
                    await cur.execute("""
                        UPDATE surveys
                        SET visit_count = visit_count + 1
                        WHERE chat_id = %s
                    """, (user_id,))

            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            discount_message = tr(context, 'discount_message').format(discount=discount) if discount > 0 else ""
            await update.message.reply_text(
                tr(context, 'appointment_confirmed').format(
                    date=appointment_info['date'],
                    time=appointment_info['time'],
                    discount_message=discount_message
                ),
                parse_mode=ParseMode.HTML,
                reply_markup=get_main_menu_keyboard(user_id, context)
            )

            # –ü–ª–∞–Ω—É—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞ –¥–µ–Ω—å —ñ –∑–∞ –≥–æ–¥–∏–Ω—É –¥–æ –∑–∞–ø–∏—Å—É
            appointment_datetime_str = f"{appointment_info['date']} {appointment_info['time']}"
            appointment_datetime = datetime.strptime(appointment_datetime_str, '%Y-%m-%d %H:%M')
            now = datetime.now()
            one_day_before = appointment_datetime - timedelta(days=1)
            one_hour_before = appointment_datetime - timedelta(hours=1)
            two_weeks_after = appointment_datetime + timedelta(weeks=2)
            job_queue = context.application.job_queue

            if one_day_before > now:
                job_queue.run_once(
                    send_reminder,
                    when=(one_day_before - now).total_seconds(),
                    chat_id=user_id,
                    data={
                        'reminder_text': tr(context, 'reminder_one_day').format(date=appointment_datetime.strftime('%Y-%m-%d'), time=appointment_datetime.strftime('%H:%M')),
                        'appointment_id': appointment_id
                    }
                )
            if one_hour_before > now:
                job_queue.run_once(
                    send_reminder,
                    when=(one_hour_before - now).total_seconds(),
                    chat_id=user_id,
                    data={
                        'reminder_text': tr(context, 'reminder_one_hour').format(date=appointment_datetime.strftime('%Y-%m-%d'), time=appointment_datetime.strftime('%H:%M')),
                        'appointment_id': appointment_id
                    }
                )

            if two_weeks_after > now:
                job_queue.run_once(
                    send_two_weeks_reminder,
                    when=(two_weeks_after - now).total_seconds(),
                    chat_id=user_id,
                    data={
                        'reminder_text': TWO_WEEKS_REMINDER_TEXT
                    }
                )

        except aiomysql.IntegrityError:
            # –°–ª–æ—Ç –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π
            await update.message.reply_text(
                tr(context, 'slot_taken'),
                reply_markup=ReplyKeyboardRemove()
            )
            await ask_appointment_time(update, context, appointment_info['date'])
            return APPOINTMENT_TIME
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É: {e}")
            await update.message.reply_text(
                tr(context, 'error_saving_appointment'),
                reply_markup=get_main_menu_keyboard(user_id, context)
            )
        finally:
            context.user_data.pop('appointment', None)
        return MENU_SELECTION

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
async def send_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    job = context.job
    chat_id = job.chat_id
    reminder_text = job.data.get('reminder_text')
    appointment_id = job.data.get('appointment_id')
    db_pool = context.application.bot_data.get('db_pool')
    if not db_pool:
        return
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∑–∞–ø–∏—Å
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                SELECT 1 FROM appointments
                WHERE id = %s
            """, (appointment_id,))
            result = await cur.fetchone()
            if result:
                # –ó–∞–ø–∏—Å —ñ—Å–Ω—É—î, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
                await context.bot.send_message(chat_id=chat_id, text=reminder_text)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –¥–≤—ñ —Ç–∏–∂–Ω—ñ
async def send_two_weeks_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    job = context.job
    chat_id = job.chat_id
    reminder_text = job.data.get('reminder_text')
    try:
        await context.bot.send_message(
            chat_id=chat_id,
            text=reminder_text,
            parse_mode=ParseMode.HTML
            )
        logger.info(f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –¥–≤—ñ —Ç–∏–∂–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –¥–≤—ñ —Ç–∏–∂–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}: {e}")

# main.py (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
async def portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    lang = context.user_data.get('lang', 'ua')
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–ø—Ä–æ—Å–∏–≤ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ.")
    db_pool = context.application.bot_data.get('db_pool')

    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT media_type, file_id FROM media
                """)
                media_items = await cur.fetchall()

        if not media_items:
            await update.message.reply_text(tr(context, 'portfolio_empty'))
            return

        for media in media_items:
            media_type, file_id = media
            if media_type == 'photo':
                await update.message.reply_photo(
                    photo=file_id,
                    caption=MESSAGES.get(lang, MESSAGES['ua']).get('portfolio_caption', '–û—Å—å –¥–µ—è–∫—ñ –∑ –º–æ—ó—Ö —Ä–æ–±—ñ—Ç! üé®')
                )
            elif media_type == 'video':
                await update.message.reply_video(
                    video=file_id,
                    caption=MESSAGES.get(lang, MESSAGES['ua']).get('portfolio_video_caption', '–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ü–µ –≤—ñ–¥–µ–æ –ø—Ä–æ –Ω–∞—à—ñ –ø–æ—Å–ª—É–≥–∏! üìπ')
                )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –º–µ–¥—ñ–∞: {e}")
        await update.message.reply_text(tr(context, 'error_generic'))

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
async def price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    lang = context.user_data.get('lang', 'ua')
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–ø—Ä–æ—Å–∏–≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç.")
    db_pool = context.application.bot_data.get('db_pool')

    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT item_name, price FROM price_list
                """)
                items = await cur.fetchall()

        if not items:
            await update.message.reply_text(tr(context, 'price_list_empty'))
            return

        price_list = tr(context, 'price_list_header') + "\n"
        for item_name, price in items:
            price_list += f"‚úÇÔ∏è {item_name} ‚Äî {price}‚Ç¥\n"

        await update.message.reply_text(
            price_list, parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞: {e}")
        await update.message.reply_text(tr(context, 'error_generic'))

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—á–∞—Ç–∫—É –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
async def survey_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    lang = context.user_data.get('lang', 'ua')
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Ä–æ–∑–ø–æ—á–∞–≤ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è.")
    context.user_data['survey'] = {'current_question': 0, 'answers': []}
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è'
    keyboard = [[MESSAGES[lang]['survey_return_button']]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=False
    )
    await update.message.reply_text(SURVEY_QUESTIONS[0], reply_markup=reply_markup)
    return SURVEY_Q1

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
async def handle_survey_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    survey = context.user_data.get('survey')
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    lang = context.user_data.get('lang', 'ua')

    if not survey:
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å–ø—Ä–æ–±—É–≤–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑ –π–æ–≥–æ –ø–æ—á–∞—Ç–∫—É.")
        await update.message.reply_text(tr(context, 'start_survey_prompt'))
        return MENU_SELECTION

    user_response = update.message.text.strip()
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤—ñ–¥–ø–æ–≤—ñ–≤: {user_response}")

    if user_response.lower() == MESSAGES[lang]['survey_return_button'].lower():
        await update.message.reply_text(
            tr(context, 'survey_cancelled'),
            reply_markup=get_main_menu_keyboard(user_id, context)
        )
        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
        context.user_data.pop('survey', None)
        return MENU_SELECTION

    # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    survey['answers'].append(user_response)
    current_q = survey['current_question']
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è {current_q + 1}: {user_response}")

    survey['current_question'] += 1

    if survey['current_question'] < len(SURVEY_QUESTIONS):
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è'
        next_question = SURVEY_QUESTIONS[survey['current_question']]
        keyboard = [[MESSAGES[lang]['survey_return_button']]]
        reply_markup = ReplyKeyboardMarkup(
            keyboard, resize_keyboard=True, one_time_keyboard=False
        )
        await update.message.reply_text(next_question, reply_markup=reply_markup)
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Å—Ç–∞–Ω
        next_state = SURVEY_Q1 + survey['current_question']
        return next_state
    else:
        # –í—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –∑–∞–¥–∞–Ω—ñ, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ
        answers = survey['answers']
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–≤–µ—Ä—à–∏–≤ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ.")

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        try:
            db_pool = context.application.bot_data.get('db_pool')
            if not db_pool:
                raise Exception("–ü—É–ª –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π.")

            async with db_pool.acquire() as conn:
                async with conn.cursor() as cur:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–∞–ø–∏—Å –≤ surveys
                    await cur.execute("SELECT id FROM surveys WHERE chat_id = %s", (chat_id,))
                    existing = await cur.fetchone()
                    if existing:
                        await cur.execute("""
                            UPDATE surveys
                            SET full_name = %s,
                                phone_number = %s,
                                hair_length = %s,
                                has_beard = %s,
                                why_chose_us = %s,
                                likes_dislikes = %s,
                                suggestions = %s,
                                discount_available = TRUE
                            WHERE chat_id = %s
                        """, (
                            answers[0],  # –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ
                            answers[1],  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
                            answers[2],  # –î–æ–≤–∂–∏–Ω–∞ –≤–æ–ª–æ—Å—Å—è
                            parse_yes_no(answers[3]),  # –ß–∏ —î –±–æ—Ä–æ–¥–∞
                            answers[4],  # –ß–æ–º—É –æ–±—Ä–∞–ª–∏ –º–µ–Ω–µ
                            answers[5],  # –©–æ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è/–Ω–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è
                            answers[6],  # –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
                            chat_id
                        ))
                    else:
                        await cur.execute("""
                            INSERT INTO surveys (
                                chat_id,
                                full_name,
                                phone_number,
                                hair_length,
                                has_beard,
                                why_chose_us,
                                likes_dislikes,
                                suggestions,
                                discount_available
                            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, TRUE)
                        """, (
                            chat_id,
                            answers[0],  # –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ
                            answers[1],  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
                            answers[2],  # –î–æ–≤–∂–∏–Ω–∞ –≤–æ–ª–æ—Å—Å—è
                            parse_yes_no(answers[3]),  # –ß–∏ —î –±–æ—Ä–æ–¥–∞
                            answers[4],  # –ß–æ–º—É –æ–±—Ä–∞–ª–∏ –º–µ–Ω–µ
                            answers[5],  # –©–æ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è/–Ω–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è
                            answers[6],  # –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
                        ))
            logger.info(f"–î–∞–Ω—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
            await update.message.reply_text(
                tr(context, 'survey_completed'),
                reply_markup=get_main_menu_keyboard(user_id, context)
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
            await update.message.reply_text(
                tr(context, 'error_saving_survey')
            )

        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
        context.user_data.pop('survey', None)
        return MENU_SELECTION

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –±–æ—Ä–æ–¥—É
def parse_yes_no(response: str) -> bool:
    """–ü–∞—Ä—Å–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –±–æ—Ä–æ–¥–∏."""
    yes_responses = ['—Ç–∞–∫', '—î', '—î –±–æ—Ä–æ–¥–∞', 'yes', 'y']
    no_responses = ['–Ω—ñ', '–Ω–µ–º–∞—î –±–æ—Ä–æ–¥–∏', 'no', 'n']
    response_lower = response.lower()
    if response_lower in yes_responses:
        return True
    elif response_lower in no_responses:
        return False
    else:
        return False  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–≤–∞–∂–∞—î–º–æ, —â–æ –±–æ—Ä–æ–¥–∏ –Ω–µ–º–∞—î

# main.py (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def my_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    lang = context.user_data.get('lang', 'ua')
    db_pool = context.application.bot_data.get('db_pool')
    if not db_pool:
        await update.message.reply_text(tr(context, 'error_generic'))
        return MENU_SELECTION

    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                # –í–∏–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –º–∞–π–±—É—Ç–Ω—ñ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                await cur.execute("""
                    SELECT appointment_date, TIME_FORMAT(appointment_time, '%%H:%%i'), id
                    FROM appointments
                    WHERE chat_id = %s AND appointment_date >= CURDATE()
                    ORDER BY appointment_date, appointment_time
                """, (user_id,))
                results = await cur.fetchall()

                if results:
                    # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –º–∞–π–±—É—Ç–Ω—ñ –∑–∞–ø–∏—Å–∏
                    message = tr(context, 'your_upcoming_appointments') + "\n"
                    for (appointment_date, appointment_time, appointment_id) in results:
                        message += f"- {appointment_date} –æ {appointment_time} ({tr(context, 'appointment_id_label')}: {appointment_id})\n"
                    message += f"\n{tr(context, 'cancel_or_back')}"

                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ –∑–∞–ø–∏—Å—É
                    nearest_appointment_id = results[0][2]
                    context.user_data['appointment_id'] = nearest_appointment_id

                    await update.message.reply_text(
                        message,
                        reply_markup=ReplyKeyboardMarkup([[
                            tr(context, 'cancel_appointment_button'),
                            tr(context, 'back_button')
                        ]], resize_keyboard=True)
                    )
                    return CANCEL_APPOINTMENT
                else:
                    await update.message.reply_text(
                        tr(context, 'no_active_appointments'),
                        reply_markup=get_main_menu_keyboard(user_id, context)
                    )
                    return MENU_SELECTION
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        await update.message.reply_text(tr(context, 'error_fetching_appointments'))
        return MENU_SELECTION

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É
async def handle_cancellation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_response = update.message.text.strip().lower()
    user_id = update.effective_user.id
    lang = context.user_data.get('lang', 'ua')

    if user_response == tr(context, 'cancel_appointment_button').lower():
        # –°–∫–∞—Å–æ–≤—É—î–º–æ –∑–∞–ø–∏—Å
        db_pool = context.application.bot_data.get('db_pool')
        if not db_pool:
            await update.message.reply_text(tr(context, 'error_generic'))
            return MENU_SELECTION
        try:
            appointment_id = context.user_data.get('appointment_id')
            if not appointment_id:
                await update.message.reply_text(tr(context, 'error_generic'))
                return MENU_SELECTION

            async with db_pool.acquire() as conn:
                async with conn.cursor() as cur:
                    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Å
                    await cur.execute("""
                        DELETE FROM appointments
                        WHERE id = %s
                    """, (appointment_id,))
            await update.message.reply_text(
                tr(context, 'appointment_cancelled'),
                reply_markup=get_main_menu_keyboard(user_id, context)
            )
            return MENU_SELECTION
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
            await update.message.reply_text(tr(context, 'error_canceling_appointment'))
            return MENU_SELECTION
    elif user_response == tr(context, 'back_button').lower():
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é
        await update.message.reply_text(
            tr(context, 'welcome'),
            reply_markup=get_main_menu_keyboard(user_id, context)
        )
        return MENU_SELECTION
    else:
        # –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞
        await update.message.reply_text(tr(context, 'unknown_command'))
        return MENU_SELECTION

# main.py (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    lang = context.user_data.get('lang', 'ua')
    await update.message.reply_text(
        tr(context, 'admin_menu_welcome'),
        reply_markup=get_admin_menu_keyboard(context)
    )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Ä–æ–∑–∫–ª–∞–¥—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def show_admin_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    lang = context.user_data.get('lang', 'ua')
    db_pool = context.application.bot_data.get('db_pool')
    if not db_pool:
        await update.message.reply_text(tr(context, 'error_generic'))
        return

    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT a.full_name, a.appointment_date, a.appointment_time, s.phone_number, a.discount
                    FROM appointments a
                    LEFT JOIN surveys s ON a.chat_id = s.chat_id
                    ORDER BY a.appointment_date, a.appointment_time
                """)
                appointments = await cur.fetchall()

        if not appointments:
            await update.message.reply_text(tr(context, 'no_scheduled_sessions'))
            return

        schedule = {}
        for full_name, appointment_date, appointment_time, phone_number, discount in appointments:
            if appointment_date not in schedule:
                schedule[appointment_date] = []
            phone_number = phone_number if phone_number else "N/A"
            schedule[appointment_date].append((full_name, appointment_time, phone_number, discount))

        message = tr(context, 'scheduled_sessions') + "\n"
        for date, sessions in schedule.items():
            message += f"\n*{date}*\n"
            for name, time, phone, disc in sessions:
                message += f"‚Ä¢ {time} - {name} (—Ç–µ–ª: {phone}), –ó–Ω–∏–∂–∫–∞: {disc}%\n"

        await update.message.reply_text(
            message, parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥—É: {e}")
        await update.message.reply_text(tr(context, 'error_generic'))

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
async def show_admin_clients(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    user_id = update.effective_user.id

    if query:
        await query.answer()
        chat_id = query.message.chat_id
    else:
        chat_id = user_id

    db_pool = context.application.bot_data.get('db_pool')
    if not db_pool:
        if query:
            await query.edit_message_text(tr(context, 'error_generic'))
        else:
            await update.message.reply_text(tr(context, 'error_generic'))
        return ConversationHandler.END

    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT chat_id, full_name, phone_number
                    FROM surveys
                    ORDER BY created_at DESC
                """)
                clients = await cur.fetchall()

        if not clients:
            if query:
                await query.edit_message_text(tr(context, 'no_clients'))
            else:
                await update.message.reply_text(tr(context, 'no_clients'))

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥"
            reply_back = ReplyKeyboardMarkup([['–ù–∞–∑–∞–¥']], resize_keyboard=True, one_time_keyboard=True)
            await context.bot.send_message(
                chat_id=chat_id,
                text=tr(context, 'press_back_to_admin_menu'),
                reply_markup=reply_back
            )
            return CLIENTS_LIST

        total_clients = len(clients)
        total_pages = math.ceil(total_clients / CLIENTS_PER_PAGE)
        current_page = 1

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
        context.user_data['clients'] = clients
        context.user_data['clients_page'] = current_page
        context.user_data['total_pages'] = total_pages

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
        message_text, keyboard = generate_clients_page(clients, current_page, total_pages, lang)

        if query:
            await query.edit_message_reply_markup(reply_markup=ReplyKeyboardRemove())
            await context.bot.send_message(
                chat_id=chat_id,
                text=message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
        else:
            await update.message.reply_text(
                tr(context, 'displaying_clients'),
                reply_markup=ReplyKeyboardRemove()
            )
            await update.message.reply_text(
                text=message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard
            )

        # –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∫–ª—ñ—î–Ω—Ç–∏ —î
        reply_back = ReplyKeyboardMarkup([['–ù–∞–∑–∞–¥']], resize_keyboard=True, one_time_keyboard=True)
        await context.bot.send_message(
            chat_id=chat_id,
            text=tr(context, 'press_back_to_admin_menu'),
            reply_markup=reply_back
        )

        return CLIENTS_LIST

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤: {e}")
        if query:
            await query.edit_message_text(tr(context, 'error_fetching_clients'))
        else:
            await update.message.reply_text(tr(context, 'error_fetching_clients'))
        return ConversationHandler.END

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤
def generate_clients_page(clients, page, total_pages, lang):
    start_index = (page - 1) * CLIENTS_PER_PAGE
    end_index = start_index + CLIENTS_PER_PAGE
    page_clients = clients[start_index:end_index]

    message = f"*{tr_by_lang(lang, 'my_clients')} (–°—Ç–æ—Ä—ñ–Ω–∫–∞ {page} –∑ {total_pages}):*\n"

    keyboard = []

    for client in page_clients:
        chat_id, full_name, phone_number = client
        button_text = f"{full_name} ({phone_number})"
        callback_data = f"client_{chat_id}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(InlineKeyboardButton(tr_by_lang(lang, 'previous'), callback_data=f"clients_page_{page - 1}"))
    if page < total_pages:
        pagination_buttons.append(InlineKeyboardButton(tr_by_lang(lang, 'next'), callback_data=f"clients_page_{page + 1}"))

    if pagination_buttons:
        keyboard.append(pagination_buttons)

    return message, InlineKeyboardMarkup(keyboard)

# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –∫–Ω–æ–ø–æ–∫ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
def tr_by_lang(lang, key):
    return MESSAGES.get(lang, MESSAGES['ua']).get(key, key)

# main.py (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def back_to_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    lang = context.user_data.get('lang', 'ua')
    await query.answer()
    user_id = query.from_user.id

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–º –º–µ–Ω—é
    await context.bot.send_message(
        chat_id=user_id,
        text=tr(context, 'admin_menu_welcome'),
        reply_markup=get_admin_menu_keyboard(context)
    )

    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∞–±–æ –¥–µ—Ç–∞–ª—è–º–∏ –∫–ª—ñ—î–Ω—Ç–∞
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

    return ADMIN_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –¥–µ—Ç–∞–ª–µ–π –∫–ª—ñ—î–Ω—Ç–∞
async def show_client_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    lang = context.user_data.get('lang', 'ua')
    await query.answer()

    callback_data = query.data
    _, chat_id_str = callback_data.split('_')
    chat_id = int(chat_id_str)

    clients = context.user_data.get('clients', [])
    client = next((c for c in clients if c[0] == chat_id), None)

    if not client:
        await query.edit_message_text(tr(context, 'client_not_found'))
        return CLIENTS_LIST

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∫–ª—ñ—î–Ω—Ç–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    db_pool = context.application.bot_data.get('db_pool')
    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT full_name, phone_number, hair_length, has_beard, 
                           why_chose_us, likes_dislikes, suggestions, visit_count, 
                           discount_available, created_at
                    FROM surveys
                    WHERE chat_id = %s
                """, (chat_id,))
                details = await cur.fetchone()

        if not details:
            await query.edit_message_text(tr(context, 'client_details_not_found'))
            return CLIENTS_LIST

        (full_name, phone_number, hair_length, has_beard,
         why_chose_us, likes_dislikes, suggestions, visit_count,
         discount_available, created_at) = details

        message = (
            f"*{tr(context, 'client_details')}*\n"
            f"*{tr(context, 'name')}:* {full_name}\n"
            f"*{tr(context, 'phone')}:* {phone_number}\n"
            f"*{tr(context, 'hair_length')}:* {hair_length}\n"
            f"*{tr(context, 'has_beard')}:* {'–¢–∞–∫' if has_beard else '–ù—ñ'}\n"
            f"*{tr(context, 'why_chose_us')}:* {why_chose_us}\n"
            f"*{tr(context, 'likes_dislikes')}:* {likes_dislikes}\n"
            f"*{tr(context, 'suggestions')}:* {suggestions}\n"
            f"*{tr(context, 'visit_count')}:* {visit_count}\n"
            f"*{tr(context, 'discount_available')}:* {'–¢–∞–∫' if discount_available else '–ù—ñ'}\n"
            f"*{tr(context, 'created_at')}:* {created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
        )

        keyboard = [
            [InlineKeyboardButton(tr(context, 'back_to_clients_list'), callback_data="back_to_clients_list")],
            [InlineKeyboardButton(tr(context, 'back_to_admin_menu'), callback_data="back_to_admin_menu_inline")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text=message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

        return CLIENT_DETAILS

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–µ—Ç–∞–ª–µ–π –∫–ª—ñ—î–Ω—Ç–∞ {chat_id}: {e}")
        await query.edit_message_text(tr(context, 'error_generic'))
        return CLIENTS_LIST

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
async def back_to_clients_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    lang = context.user_data.get('lang', 'ua')
    await query.answer()

    clients = context.user_data.get('clients', [])
    current_page = context.user_data.get('clients_page', 1)
    total_pages = context.user_data.get('total_pages', 1)

    message_text, keyboard = generate_clients_page(clients, current_page, total_pages, lang)

    await query.edit_message_text(
        text=message_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

    return CLIENTS_LIST

# main.py (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    lang = context.user_data.get('lang', 'ua')
    await query.answer()
    user_id = query.from_user.id

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥–æ–ª–æ–≤–Ω–∏–º –º–µ–Ω—é —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω–µ
    await context.bot.send_message(
        chat_id=user_id,
        text=tr(context, 'welcome'),
        reply_markup=get_main_menu_keyboard(user_id, context)
    )

    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏ –∞–±–æ –¥–µ—Ç–∞–ª—è–º–∏ –∫–ª—ñ—î–Ω—Ç–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

    return ADMIN_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–∫–∞–∑—É –ø–µ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤
async def show_clients_page(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    lang = context.user_data.get('lang', 'ua')
    await query.answer()

    callback_data = query.data
    _, page_str = callback_data.split('_page_')
    page = int(page_str)

    clients = context.user_data.get('clients', [])
    total_pages = context.user_data.get('total_pages', 1)

    message_text, keyboard = generate_clients_page(clients, page, total_pages, lang)

    await query.edit_message_text(
        text=message_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    context.user_data['clients_page'] = page

    return CLIENTS_LIST

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ Inline –∫–Ω–æ–ø–∫–∏
async def back_to_admin_menu_inline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    lang = context.user_data.get('lang', 'ua')
    await query.answer()
    user_id = query.from_user.id
    await context.bot.send_message(
        chat_id=user_id,
        text=tr(context, 'admin_menu_welcome'),
        reply_markup=get_admin_menu_keyboard(context)
    )
    await query.message.delete()
    return ADMIN_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    lang = context.user_data.get('lang', 'ua')
    logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {update.message.text}")
    await update.message.reply_text(
        tr(context, 'unknown_command')
    )

# main.py (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
async def create_settings_table(db_pool):
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                CREATE TABLE IF NOT EXISTS settings (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    discount_threshold INT DEFAULT 6,
                    discount_percentage DECIMAL(5,2) DEFAULT 15.00  -- –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 15% –¥–ª—è –≤—ñ–∑–∏—Ç—ñ–≤
                )
            """)
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
            await cur.execute("SELECT COUNT(*) FROM settings")
            count = await cur.fetchone()
            if count[0] == 0:
                await cur.execute("""
                    INSERT INTO settings (discount_threshold, discount_percentage)
                    VALUES (6, 15.00)  -- –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Ä—ñ–≥ –Ω–∞ 6 –≤—ñ–∑–∏—Ç—ñ–≤ —ñ –∑–Ω–∏–∂–∫—É 15%
                """)
                logger.info("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–æ–¥–∞–Ω–æ.")
            else:
                # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: –æ–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                await cur.execute("""
                    UPDATE settings
                    SET discount_threshold = 6, discount_percentage = 15.00
                    WHERE id = 1
                """)
                logger.info("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –ø–æ—Ä–æ–≥—É 6 –≤—ñ–∑–∏—Ç—ñ–≤ —Ç–∞ –∑–Ω–∏–∂–∫–∏ 15%.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
async def create_price_list_table(db_pool):
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                CREATE TABLE IF NOT EXISTS price_list (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    item_name VARCHAR(255) NOT NULL,
                    price DECIMAL(10,2) NOT NULL
                )
            """)
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
            await cur.execute("SELECT COUNT(*) FROM price_list")
            count = await cur.fetchone()
            if count[0] == 0:
                default_prices = [
                    ("–ß–æ–ª–æ–≤—ñ—á–∞ —Å—Ç—Ä–∏–∂–∫–∞", 500.00),
                    ("–ñ—ñ–Ω–æ—á–∞ —Å—Ç—Ä–∏–∂–∫–∞", 700.00),
                    ("–ì–æ–ª—ñ–Ω–Ω—è –±–æ—Ä–æ–¥–∏", 300.00),
                    ("–§–∞—Ä–±—É–≤–∞–Ω–Ω—è", 1000.00)
                ]
                await cur.executemany("""
                    INSERT INTO price_list (item_name, price)
                    VALUES (%s, %s)
                """, default_prices)
                logger.info("–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–æ–¥–∞–Ω–æ.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –º–µ–¥—ñ–∞
async def create_media_table(db_pool):
    async with db_pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("""
                CREATE TABLE IF NOT EXISTS media (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    media_type ENUM('photo', 'video') NOT NULL,
                    file_id VARCHAR(255) NOT NULL,
                    file_unique_id VARCHAR(255) NOT NULL,
                    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            logger.info("–¢–∞–±–ª–∏—Ü—è media –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞/—Å—Ç–≤–æ—Ä–µ–Ω–∞.")

# main.py (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def show_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    lang = context.user_data.get('lang', 'ua')
    db_pool = context.application.bot_data.get('db_pool')
    if not db_pool:
        await update.message.reply_text(tr(context, 'error_generic'))
        return

    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("SELECT discount_threshold, discount_percentage FROM settings WHERE id = 1")
                settings = await cur.fetchone()
                if settings:
                    threshold, percentage = settings
                    message = (
                        f"*{tr(context, 'discount_settings')}*\n"
                        f"‚Ä¢ {tr(context, 'discount_threshold')}: {threshold}\n"
                        f"‚Ä¢ {tr(context, 'discount_percentage')}: {percentage}%\n\n"
                        f"{tr(context, 'choose_action')}"
                    )
                    keyboard = [
                        [tr(context, 'change_threshold'), tr(context, 'change_percentage')],
                        [tr(context, 'manage_price_list'), tr(context, 'back_button')]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
                    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
                else:
                    await update.message.reply_text(tr(context, 'settings_not_found'))
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")
        await update.message.reply_text(tr(context, 'error_generic'))

# main.py (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –¥—ñ–π —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö
async def handle_settings_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    selection = update.message.text
    lang = context.user_data.get('lang', 'ua')
    logger.info(f"–ê–¥–º—ñ–Ω –≤–∏–±—Ä–∞–≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {selection}")

    if selection == tr(context, 'change_threshold'):
        await update.message.reply_text(
            tr(context, 'enter_new_threshold'),
            reply_markup=ReplyKeyboardRemove()
        )
        return CHANGE_THRESHOLD
    elif selection == tr(context, 'change_percentage'):
        await update.message.reply_text(
            tr(context, 'enter_new_percentage'),
            reply_markup=ReplyKeyboardRemove()
        )
        return CHANGE_PERCENTAGE
    elif selection == tr(context, 'manage_price_list'):
        await show_price_edit_menu(update, context)
        return PRICE_EDIT_SELECTION
    elif selection == tr(context, 'back_button'):
        await show_admin_menu(update, context)
        return ADMIN_MENU
    else:
        await update.message.reply_text(tr(context, 'unknown_command'))
        return SETTINGS

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ –ø–æ—Ä–æ–≥—É –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å –¥–ª—è –∑–Ω–∏–∂–∫–∏
async def change_threshold(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    new_threshold = update.message.text.strip()
    lang = context.user_data.get('lang', 'ua')

    if not new_threshold.isdigit():
        await update.message.reply_text(
            tr(context, 'invalid_number'),
            reply_markup=ReplyKeyboardMarkup([['–°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True, one_time_keyboard=True)
        )
        return CHANGE_THRESHOLD

    new_threshold = int(new_threshold)
    db_pool = context.application.bot_data.get('db_pool')

    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    UPDATE settings
                    SET discount_threshold = %s
                    WHERE id = 1
                """, (new_threshold,))
        await update.message.reply_text(
            tr(context, 'threshold_updated').format(threshold=new_threshold),
            reply_markup=get_admin_menu_keyboard(context)
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–æ—Ä–æ–≥—É –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å: {e}")
        await update.message.reply_text(tr(context, 'error_generic'))

    return ADMIN_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ –≤—ñ–¥—Å–æ—Ç–∫–∞ –∑–Ω–∏–∂–∫–∏
async def change_percentage(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    new_percentage = update.message.text.strip()
    lang = context.user_data.get('lang', 'ua')

    try:
        new_percentage = float(new_percentage)
        if new_percentage < 0:
            raise ValueError("–í—ñ–¥—Å–æ—Ç–æ–∫ –∑–Ω–∏–∂–∫–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–∏–º.")
    except ValueError:
        await update.message.reply_text(
            tr(context, 'invalid_percentage'),
            reply_markup=ReplyKeyboardMarkup([['–°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True, one_time_keyboard=True)
        )
        return CHANGE_PERCENTAGE

    db_pool = context.application.bot_data.get('db_pool')

    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    UPDATE settings
                    SET discount_percentage = %s
                    WHERE id = 1
                """, (new_percentage,))
        await update.message.reply_text(
            tr(context, 'percentage_updated').format(percentage=new_percentage),
            reply_markup=get_admin_menu_keyboard(context)
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –≤—ñ–¥—Å–æ—Ç–∫–∞ –∑–Ω–∏–∂–∫–∏: {e}")
        await update.message.reply_text(tr(context, 'error_generic'))

    return ADMIN_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
async def show_price_edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    lang = context.user_data.get('lang', 'ua')
    keyboard = [
        [tr(context, 'add_item'), tr(context, 'edit_item')],
        [tr(context, 'delete_item'), tr(context, 'back_button')]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        tr(context, 'price_list_management'),
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –¥—ñ–π —É –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—ñ
async def handle_price_edit_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    selection = update.message.text
    lang = context.user_data.get('lang', 'ua')
    logger.info(f"–ê–¥–º—ñ–Ω –≤–∏–±—Ä–∞–≤ –¥—ñ—é –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞: {selection}")

    if selection == tr(context, 'add_item'):
        await update.message.reply_text(
            tr(context, 'enter_new_item_name'),
            reply_markup=ReplyKeyboardRemove()
        )
        return PRICE_EDIT_ADD_NAME
    elif selection == tr(context, 'edit_item'):
        await list_price_items(update, context, action="edit")
        return PRICE_EDIT_EDIT_ID
    elif selection == tr(context, 'delete_item'):
        await list_price_items(update, context, action="delete")
        return PRICE_EDIT_DELETE_ID
    elif selection == tr(context, 'back_button'):
        await show_settings_menu(update, context)
        return SETTINGS
    else:
        await update.message.reply_text(tr(context, 'unknown_command'))
        return PRICE_EDIT_SELECTION

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–ø–∏—Å–∫—É –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
async def list_price_items(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str) -> None:
    lang = context.user_data.get('lang', 'ua')
    db_pool = context.application.bot_data.get('db_pool')

    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("SELECT id, item_name, price FROM price_list")
                items = await cur.fetchall()

        if not items:
            await update.message.reply_text(tr(context, 'price_list_empty'))
            await show_price_edit_menu(update, context)
            return

        message = f"*{tr(context, 'price_list')}*\n"
        for item_id, item_name, price in items:
            message += f"{item_id}. {item_name} ‚Äî {price}‚Ç¥\n"

        action_text = tr(context, f'action_{action}')
        await update.message.reply_text(
            f"{message}\n{tr(context, 'enter_item_id_for_action').format(action=action_text)}",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=ReplyKeyboardMarkup([['–°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True, one_time_keyboard=True)
        )
        context.user_data['price_action'] = action
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞: {e}")
        await update.message.reply_text(tr(context, 'error_generic'))

# main.py (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç
async def add_price_item_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    item_name = update.message.text.strip()
    lang = context.user_data.get('lang', 'ua')

    if item_name.lower() == tr(context, 'cancel').lower():
        return await cancel_price_edit(update, context)

    if not item_name:
        await update.message.reply_text(
            tr(context, 'empty_item_name'),
            reply_markup=ReplyKeyboardMarkup([['–°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True, one_time_keyboard=True)
        )
        return PRICE_EDIT_ADD_NAME

    context.user_data['new_item_name'] = item_name
    await update.message.reply_text(
        tr(context, 'enter_item_price'),
        reply_markup=ReplyKeyboardMarkup([['–°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True, one_time_keyboard=True)
    )
    return PRICE_EDIT_ADD_PRICE

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ü—ñ–Ω–∏ –Ω–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
async def add_price_item_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    price_text = update.message.text.strip()
    lang = context.user_data.get('lang', 'ua')

    if price_text.lower() == tr(context, 'cancel').lower():
        return await cancel_price_edit(update, context)

    try:
        price = float(price_text)
        if price < 0:
            raise ValueError("–¶—ñ–Ω–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é.")
    except ValueError:
        await update.message.reply_text(
            tr(context, 'invalid_price'),
            reply_markup=ReplyKeyboardMarkup([['–°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True, one_time_keyboard=True)
        )
        return PRICE_EDIT_ADD_PRICE

    item_name = context.user_data.get('new_item_name')
    db_pool = context.application.bot_data.get('db_pool')

    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    INSERT INTO price_list (item_name, price)
                    VALUES (%s, %s)
                """, (item_name, price))
        await update.message.reply_text(
            tr(context, 'item_added_successfully').format(item_name=item_name, price=price),
            reply_markup=get_admin_menu_keyboard(context)
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó: {e}")
        await update.message.reply_text(tr(context, 'error_generic'))

    context.user_data.pop('new_item_name', None)
    return ADMIN_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
async def cancel_price_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = context.user_data.get('lang', 'ua')
    await update.message.reply_text(
        tr(context, 'operation_cancelled'),
        reply_markup=get_admin_menu_keyboard(context)
    )
    # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –ø–æ–≤'—è–∑–∞–Ω—ñ –¥–∞–Ω—ñ
    keys_to_remove = [
        'new_item_name', 'edit_item_id', 'current_name', 'current_price',
        'delete_item_id', 'delete_item_name'
    ]
    for key in keys_to_remove:
        context.user_data.pop(key, None)
    return PRICE_EDIT_SELECTION

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ ID –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
async def edit_price_item_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    item_id = update.message.text.strip()
    lang = context.user_data.get('lang', 'ua')

    if item_id.lower() == tr(context, 'cancel').lower():
        return await cancel_price_edit(update, context)

    if not item_id.isdigit():
        await update.message.reply_text(
            tr(context, 'invalid_item_id'),
            reply_markup=ReplyKeyboardMarkup([['–°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True, one_time_keyboard=True)
        )
        return PRICE_EDIT_EDIT_ID

    item_id = int(item_id)
    context.user_data['edit_item_id'] = item_id

    db_pool = context.application.bot_data.get('db_pool')
    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("SELECT item_name, price FROM price_list WHERE id = %s", (item_id,))
                result = await cur.fetchone()
                if not result:
                    await update.message.reply_text(
                        tr(context, 'item_not_found'),
                        reply_markup=ReplyKeyboardMarkup([['–°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True, one_time_keyboard=True)
                    )
                    return PRICE_EDIT_EDIT_ID

                current_name, current_price = result
                context.user_data['current_name'] = current_name
                context.user_data['current_price'] = current_price

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–æ–∑–∏—Ü—ñ—ó ID {item_id}: {e}")
        await update.message.reply_text(tr(context, 'error_generic'))
        return PRICE_EDIT_SELECTION

    await update.message.reply_text(
        tr(context, 'enter_new_item_name').format(current_name=current_name),
        reply_markup=ReplyKeyboardRemove()
    )
    return PRICE_EDIT_EDIT_NAME

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–æ–≥–æ —ñ–º–µ–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
async def edit_price_item_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    new_name = update.message.text.strip()
    lang = context.user_data.get('lang', 'ua')

    if new_name.lower() == tr(context, 'cancel').lower():
        return await cancel_price_edit(update, context)

    if not new_name:
        await update.message.reply_text(
            tr(context, 'empty_item_name'),
            reply_markup=ReplyKeyboardMarkup([['–°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True, one_time_keyboard=True)
        )
        return PRICE_EDIT_EDIT_NAME

    context.user_data['new_item_name'] = new_name
    await update.message.reply_text(
        tr(context, 'enter_new_item_price'),
        reply_markup=ReplyKeyboardMarkup([['–°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True, one_time_keyboard=True)
    )
    return PRICE_EDIT_EDIT_PRICE

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–æ—ó —Ü—ñ–Ω–∏ –ø–æ–∑–∏—Ü—ñ—ó
async def edit_price_item_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    price_text = update.message.text.strip()
    lang = context.user_data.get('lang', 'ua')

    if price_text.lower() == tr(context, 'cancel').lower():
        return await cancel_price_edit(update, context)

    try:
        new_price = float(price_text)
        if new_price < 0:
            raise ValueError("–¶—ñ–Ω–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é.")
    except ValueError:
        await update.message.reply_text(
            tr(context, 'invalid_price'),
            reply_markup=ReplyKeyboardMarkup([['–°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True, one_time_keyboard=True)
        )
        return PRICE_EDIT_EDIT_PRICE

    item_id = context.user_data.get('edit_item_id')
    new_name = context.user_data.get('new_item_name')
    db_pool = context.application.bot_data.get('db_pool')

    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    UPDATE price_list
                    SET item_name = %s, price = %s
                    WHERE id = %s
                """, (new_name, new_price, item_id))
        await update.message.reply_text(
            tr(context, 'item_updated_successfully').format(item_id=item_id),
            reply_markup=get_admin_menu_keyboard(context)
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó ID {item_id}: {e}")
        await update.message.reply_text(tr(context, 'error_generic'))

    # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
    context.user_data.pop('edit_item_id', None)
    context.user_data.pop('new_item_name', None)
    context.user_data.pop('current_name', None)
    context.user_data.pop('current_price', None)

    return ADMIN_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
async def delete_price_item_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    item_id = update.message.text.strip()
    lang = context.user_data.get('lang', 'ua')

    if item_id.lower() == tr(context, 'cancel').lower():
        return await cancel_price_edit(update, context)

    if not item_id.isdigit():
        await update.message.reply_text(
            tr(context, 'invalid_item_id'),
            reply_markup=ReplyKeyboardMarkup([['–°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True, one_time_keyboard=True)
        )
        return PRICE_EDIT_DELETE_ID

    item_id = int(item_id)
    context.user_data['delete_item_id'] = item_id

    db_pool = context.application.bot_data.get('db_pool')
    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("SELECT item_name FROM price_list WHERE id = %s", (item_id,))
                result = await cur.fetchone()
                if not result:
                    await update.message.reply_text(
                        tr(context, 'item_not_found'),
                        reply_markup=ReplyKeyboardMarkup([['–°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True, one_time_keyboard=True)
                    )
                    return PRICE_EDIT_DELETE_ID

                item_name = result[0]
                context.user_data['delete_item_name'] = item_name

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–æ–∑–∏—Ü—ñ—ó ID {item_id}: {e}")
        await update.message.reply_text(tr(context, 'error_generic'))
        return PRICE_EDIT_SELECTION

    await update.message.reply_text(
        tr(context, 'confirm_delete_item').format(item_name=item_name),
        reply_markup=ReplyKeyboardMarkup([['–¢–∞–∫', '–°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True, one_time_keyboard=True)
    )
    return PRICE_EDIT_DELETE_ID

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
async def confirm_delete_price_item(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_response = update.message.text.strip().lower()
    user_id = update.effective_user.id
    lang = context.user_data.get('lang', 'ua')

    if user_response == tr(context, 'confirm_yes').lower():
        item_id = context.user_data.get('delete_item_id')
        item_name = context.user_data.get('delete_item_name')
        db_pool = context.application.bot_data.get('db_pool')

        try:
            async with db_pool.acquire() as conn:
                async with conn.cursor() as cur:
                    await cur.execute("DELETE FROM price_list WHERE id = %s", (item_id,))
            await update.message.reply_text(
                tr(context, 'item_deleted_successfully').format(item_name=item_name),
                reply_markup=get_admin_menu_keyboard(context)
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó ID {item_id}: {e}")
            await update.message.reply_text(tr(context, 'error_generic'))

        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
        context.user_data.pop('delete_item_id', None)
        context.user_data.pop('delete_item_name', None)
        return ADMIN_MENU

    elif user_response == tr(context, 'confirm_cancel').lower():
        await update.message.reply_text(
            tr(context, 'delete_operation_cancelled'),
            reply_markup=get_price_edit_menu_keyboard(lang)
        )
        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
        context.user_data.pop('delete_item_id', None)
        context.user_data.pop('delete_item_name', None)
        return PRICE_EDIT_SELECTION
    else:
        await update.message.reply_text(
            tr(context, 'invalid_confirmation_response'),
            reply_markup=ReplyKeyboardMarkup([['–¢–∞–∫', '–°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True, one_time_keyboard=True)
        )
        return PRICE_EDIT_DELETE_ID

def get_price_edit_menu_keyboard(lang):
    keyboard = [
        [MESSAGES[lang]['add_item'], MESSAGES[lang]['edit_item']],
        [MESSAGES[lang]['delete_item'], MESSAGES[lang]['back_button']]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º–µ–¥—ñ–∞
async def show_media_management_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    lang = context.user_data.get('lang', 'ua')
    keyboard = [
        [tr(context, 'add_photo'), tr(context, 'add_video')],
        [tr(context, 'delete_media'), tr(context, 'back_button')]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        tr(context, 'media_management'),
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –¥—ñ–π —É –º–µ–¥—ñ–∞
async def handle_media_management_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    selection = update.message.text
    lang = context.user_data.get('lang', 'ua')
    logger.info(f"–ê–¥–º—ñ–Ω –≤–∏–±—Ä–∞–≤ –¥—ñ—é –º–µ–¥—ñ–∞: {selection}")

    if selection == tr(context, 'add_photo'):
        keyboard = [['–°–∫–∞—Å—É–≤–∞—Ç–∏']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            tr(context, 'send_photo_to_add'),
            reply_markup=reply_markup
        )
        return MEDIA_UPLOAD_PHOTO
    elif selection == tr(context, 'add_video'):
        keyboard = [['–°–∫–∞—Å—É–≤–∞—Ç–∏']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            tr(context, 'send_video_to_add'),
            reply_markup=reply_markup
        )
        return MEDIA_UPLOAD_VIDEO
    elif selection == tr(context, 'delete_media'):
        await list_media_items(update, context, action="delete")
        return MEDIA_MANAGEMENT
    elif selection == tr(context, 'back_button'):
        await show_admin_menu(update, context)
        return ADMIN_MENU
    else:
        await update.message.reply_text(tr(context, 'unknown_command'))
        return MEDIA_MANAGEMENT

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
async def add_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message.photo:
        await update.message.reply_text(tr(context, 'invalid_photo'))
        return MEDIA_UPLOAD_PHOTO

    photo = update.message.photo[-1]  # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—É —è–∫—ñ—Å—Ç—å
    file_id = photo.file_id
    file_unique_id = photo.file_unique_id
    db_pool = context.application.bot_data.get('db_pool')

    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    INSERT INTO media (media_type, file_id, file_unique_id)
                    VALUES ('photo', %s, %s)
                """, (file_id, file_unique_id))
                media_id = cur.lastrowid
        await update.message.reply_text(
            tr(context, 'photo_added_successfully'),
            reply_markup=get_admin_menu_keyboard(context)
        )

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑ Inline –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        keyboard = [
            [InlineKeyboardButton(tr(context, 'delete'), callback_data=f"delete_media_{media_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"{tr(context, 'new_photo_added')} ID: {media_id}",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(tr(context, 'error_generic'))

    return ADMIN_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ
async def add_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message.video:
        await update.message.reply_text(tr(context, 'invalid_video'))
        return MEDIA_UPLOAD_VIDEO

    video = update.message.video
    file_id = video.file_id
    file_unique_id = video.file_unique_id
    db_pool = context.application.bot_data.get('db_pool')

    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    INSERT INTO media (media_type, file_id, file_unique_id)
                    VALUES ('video', %s, %s)
                """, (file_id, file_unique_id))
                media_id = cur.lastrowid
        await update.message.reply_text(
            tr(context, 'video_added_successfully'),
            reply_markup=get_admin_menu_keyboard(context)
        )

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑ Inline –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        keyboard = [
            [InlineKeyboardButton(tr(context, 'delete'), callback_data=f"delete_media_{media_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"{tr(context, 'new_video_added')} ID: {media_id}",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤—ñ–¥–µ–æ: {e}")
        await update.message.reply_text(tr(context, 'error_generic'))

    return ADMIN_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–ø–∏—Å–∫—É –º–µ–¥—ñ–∞
async def list_media_items(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str) -> None:
    lang = context.user_data.get('lang', 'ua')
    db_pool = context.application.bot_data.get('db_pool')

    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT id, media_type, file_id FROM media
                """)
                media_items = await cur.fetchall()

        if not media_items:
            await update.message.reply_text(tr(context, 'media_library_empty'))
            await show_media_management_menu(update, context)
            return

        message = f"*{tr(context, 'media_library')}*\n"
        for media in media_items:
            media_id, media_type, file_id = media
            message += f"{media_id}. –¢–∏–ø: {media_type}, File ID: {file_id}\n"

        action_text = tr(context, f'action_{action}')
        await update.message.reply_text(
            f"{message}\n{tr(context, 'enter_media_id_for_action').format(action=action_text)}",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=ReplyKeyboardMarkup([['–°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True, one_time_keyboard=True)
        )
        context.user_data['media_action'] = action
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º–µ–¥—ñ–∞: {e}")
        await update.message.reply_text(tr(context, 'error_generic'))

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–¥—ñ–∞
async def delete_media_item(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = context.user_data.get('lang', 'ua')
    action = context.user_data.get('media_action')

    if action != 'delete':
        await update.message.reply_text(tr(context, 'unknown_command'))
        return MEDIA_MANAGEMENT

    media_id_str = update.message.text.strip()
    if not media_id_str.isdigit():
        await update.message.reply_text(
            tr(context, 'invalid_media_id'),
            reply_markup=ReplyKeyboardMarkup([['–°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True, one_time_keyboard=True)
        )
        return MEDIA_MANAGEMENT

    media_id = int(media_id_str)
    db_pool = context.application.bot_data.get('db_pool')

    try:
        async with db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT media_type, file_id FROM media WHERE id = %s
                """, (media_id,))
                result = await cur.fetchone()
                if not result:
                    await update.message.reply_text(tr(context, 'media_not_found'))
                    return MEDIA_MANAGEMENT

                # –í–∏–¥–∞–ª—è—î–º–æ –º–µ–¥—ñ–∞
                await cur.execute("DELETE FROM media WHERE id = %s", (media_id,))
        await update.message.reply_text(
            tr(context, 'media_deleted_successfully').format(media_id=media_id),
            reply_markup=get_admin_menu_keyboard(context)
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –º–µ–¥—ñ–∞: {e}")
        await update.message.reply_text(tr(context, 'error_generic'))

    return ADMIN_MENU

# main.py (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–ª–±–µ–∫—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–¥—ñ–∞ —á–µ—Ä–µ–∑ Inline –∫–Ω–æ–ø–∫–∏
async def delete_media_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    lang = context.user_data.get('lang', 'ua')
    await query.answer()

    data = query.data
    if data.startswith("delete_media_"):
        media_id = int(data.split("_")[2])
        db_pool = context.application.bot_data.get('db_pool')

        try:
            async with db_pool.acquire() as conn:
                async with conn.cursor() as cur:
                    await cur.execute("""
                        SELECT media_type, file_id FROM media WHERE id = %s
                    """, (media_id,))
                    result = await cur.fetchone()
                    if not result:
                        await query.edit_message_text(tr(context, 'media_already_deleted'))
                        return

                    media_type, file_id = result
                    await cur.execute("DELETE FROM media WHERE id = %s", (media_id,))
            await query.edit_message_text(tr(context, 'media_deleted_successfully').format(media_id=media_id))
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –º–µ–¥—ñ–∞ —á–µ—Ä–µ–∑ callback: {e}")
            await query.edit_message_text(tr(context, 'error_generic'))
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º—É –º–µ–Ω—é
async def handle_admin_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    admin_selection = update.message.text
    lang = context.user_data.get('lang', 'ua')
    logger.info(f"–ê–¥–º—ñ–Ω –≤–∏–±—Ä–∞–≤ –æ–ø—Ü—ñ—é: {admin_selection}")

    if admin_selection == tr(context, 'show_schedule'):
        await show_admin_schedule(update, context)
        return ADMIN_MENU
    elif admin_selection == tr(context, 'show_clients'):
        await show_admin_clients(update, context)
        return CLIENTS_LIST
    elif admin_selection == tr(context, 'settings'):
        await show_settings_menu(update, context)
        return SETTINGS
    elif admin_selection == tr(context, 'media_management'):
        await show_media_management_menu(update, context)
        return MEDIA_MANAGEMENT
    elif admin_selection == tr(context, 'back_button'):
        await show_admin_menu(update, context)
        return ADMIN_MENU
    else:
        await update.message.reply_text(tr(context, 'unknown_command'))
        return ADMIN_MENU

# main.py (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main():
    application = ApplicationBuilder().token(TOKEN).post_init(on_startup).post_shutdown(on_shutdown).build()

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(error_handler)

    # Conversation handler –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            LANGUAGE_CHOICE: [
                MessageHandler(filters.Regex(r'^(–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞|–†—É—Å—Å–∫–∏–π|ƒåesky)$'), choose_language),
                # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å —â–æ—Å—å —ñ–Ω—à–µ:
                MessageHandler(filters.TEXT & ~filters.COMMAND, choose_language)
            ],
            MENU_SELECTION: [
                MessageHandler(filters.Regex(
                    r'^(' + '|'.join([
                        MESSAGES['ua']['main_menu'][0][0],  # "‚úÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É"
                        MESSAGES['ua']['main_menu'][0][1],  # "üë®‚Äçüîß –û–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –º–∞–π—Å—Ç—Ä–æ–º"
                        MESSAGES['ua']['main_menu'][1][0],  # "üí≤ –ü—Ä–∞–π—Å"
                        MESSAGES['ua']['main_menu'][1][1],  # "üìÖ –ú—ñ–π –∑–∞–ø–∏—Å"
                        MESSAGES['ua']['main_menu'][2][0],  # "üìù –ü—Ä–æ–π—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è - –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–Ω–∏–∂–∫—É"
                        MESSAGES['ua'].get('admin_menu_extra_button', "üìã –ê–¥–º—ñ–Ω –ú–µ–Ω—é")  # "üìã –ê–¥–º—ñ–Ω –ú–µ–Ω—é"
                    ]) + r')$'
                ), handle_menu_selection)
            ],
            APPOINTMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, appointment)
            ],
            APPOINTMENT_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_appointment_date)
            ],
            APPOINTMENT_TIME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_appointment_time)
            ],
            CONFIRM_APPOINTMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_appointment)
            ],
            CANCEL_APPOINTMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_cancellation)
            ],
            SURVEY_Q1: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_survey_response)
            ],
            # –î–æ–¥–∞–π—Ç–µ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è SURVEY_Q2 - SURVEY_Q7 –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ
            ADMIN_MENU: [
                MessageHandler(filters.Regex(
                    r'^(' + '|'.join([item for sublist in MESSAGES['ua']['admin_menu'] for item in sublist]) + r')$'
                ), handle_admin_menu_selection)
            ],
            SETTINGS: [
                MessageHandler(filters.Regex(
                    r'^(change_threshold|change_percentage|manage_price_list|back)$'
                ), handle_settings_selection)
            ],
            PRICE_EDIT_SELECTION: [
                MessageHandler(filters.Regex(
                    r'^(add_item|edit_item|delete_item|back)$'
                ), handle_price_edit_selection)
            ],
            PRICE_EDIT_ADD_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_price_item_name),
                MessageHandler(filters.Regex('^–°–∫–∞—Å—É–≤–∞—Ç–∏$'), cancel_price_edit)
            ],
            PRICE_EDIT_ADD_PRICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_price_item_price),
                MessageHandler(filters.Regex('^–°–∫–∞—Å—É–≤–∞—Ç–∏$'), cancel_price_edit)
            ],
            PRICE_EDIT_EDIT_ID: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_price_item_id),
                MessageHandler(filters.Regex('^–°–∫–∞—Å—É–≤–∞—Ç–∏$'), cancel_price_edit)
            ],
            PRICE_EDIT_EDIT_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_price_item_name),
                MessageHandler(filters.Regex('^–°–∫–∞—Å—É–≤–∞—Ç–∏$'), cancel_price_edit)
            ],
            PRICE_EDIT_EDIT_PRICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_price_item_price),
                MessageHandler(filters.Regex('^–°–∫–∞—Å—É–≤–∞—Ç–∏$'), cancel_price_edit)
            ],
            PRICE_EDIT_DELETE_ID: [
                MessageHandler(filters.Regex('^(—Ç–∞–∫|—Å–∫–∞—Å—É–≤–∞—Ç–∏)$'), confirm_delete_price_item),
                MessageHandler(filters.TEXT & ~filters.COMMAND, delete_price_item_id)
            ],
            MEDIA_MANAGEMENT: [
                MessageHandler(filters.Regex(
                    r'^(add_photo|add_video|delete_media|back)$'
                ), handle_media_management_selection),
                # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –º–µ–¥—ñ–∞
                MessageHandler(filters.Regex('^–°–∫–∞—Å—É–≤–∞—Ç–∏$'), cancel_media_upload),
            ],
            MEDIA_UPLOAD_PHOTO: [
                MessageHandler(filters.PHOTO, add_photo),
                MessageHandler(filters.Regex('^–°–∫–∞—Å—É–≤–∞—Ç–∏$'), cancel_media_upload),
            ],
            MEDIA_UPLOAD_VIDEO: [
                MessageHandler(filters.VIDEO, add_video),
                MessageHandler(filters.Regex('^–°–∫–∞—Å—É–≤–∞—Ç–∏$'), cancel_media_upload),
            ],
            CLIENTS_LIST: [
                CallbackQueryHandler(show_clients_page, pattern=r'^clients_page_\d+$'),
                CallbackQueryHandler(show_client_details, pattern=r'^client_\d+$'),
                MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), back_to_admin_menu_reply),
            ],
            CLIENT_DETAILS: [
                CallbackQueryHandler(back_to_clients_list, pattern=r'^back_to_clients_list$'),
            ],
        },
        fallbacks=[CommandHandler('start', start)],
        allow_reentry=False
    )
    application.add_handler(conv_handler)

    # CallbackQueryHandler –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–¥—ñ–∞ —á–µ—Ä–µ–∑ Inline –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(delete_media_callback, pattern=r'^delete_media_\d+$'))

    # –û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.COMMAND, unknown))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ polling
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.")
    application.run_polling()

async def cancel_media_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    await update.message.reply_text(
        tr(context, 'operation_cancelled'),
        reply_markup=get_admin_menu_keyboard(context)
    )
    # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–≤'—è–∑–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö, —è–∫—â–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
    context.user_data.pop('media_upload', None)
    return MEDIA_MANAGEMENT

async def back_to_admin_menu_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    await update.message.reply_text(
        tr(context, 'admin_menu_welcome'),
        reply_markup=get_admin_menu_keyboard(context)
    )
    return ADMIN_MENU

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    if isinstance(update, Update) and update.message:
        try:
            await update.message.reply_text(tr(context, 'error_generic'))
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º—É –º–µ–Ω—é
async def handle_admin_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    admin_selection = update.message.text
    lang = context.user_data.get('lang', 'ua')
    logger.info(f"–ê–¥–º—ñ–Ω –≤–∏–±—Ä–∞–≤ –æ–ø—Ü—ñ—é: {admin_selection}")

    if admin_selection == tr(context, 'show_schedule'):
        await show_admin_schedule(update, context)
        return ADMIN_MENU
    elif admin_selection == tr(context, 'show_clients'):
        await show_admin_clients(update, context)
        return CLIENTS_LIST
    elif admin_selection == tr(context, 'settings'):
        await show_settings_menu(update, context)
        return SETTINGS
    elif admin_selection == tr(context, 'media_management'):
        await show_media_management_menu(update, context)
        return MEDIA_MANAGEMENT
    elif admin_selection == tr(context, 'back_button'):
        await show_admin_menu(update, context)
        return ADMIN_MENU
    else:
        await update.message.reply_text(tr(context, 'unknown_command'))
        return ADMIN_MENU

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
if __name__ == '__main__':
    main()
